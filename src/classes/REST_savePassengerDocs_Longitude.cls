/*
---------------------------------------------------------------
-------------------Created by Mark Mulholland------------------
-------------------------18/12/2017----------------------------
---------------------------------------------------------------

Test jSon
{
    "json": {
        "eDocsJson": {
            "BookingRef": "A358754",
            "SellingCompanyCode": "TTSYDS",
            "BookingType": "CT",
            "DepartureDate": "2017-01-01T00:00:00",
            "TravelAgency": "My agency",
            "LeadPassengerName": "Mrs J Micallef",
            "MTSMessaging": "0"
            "Tours": [{
                "TourCode": "DEUSM11",
                "TourName": "East Coast USA and Canada",
                "Passengers": [{
                    "PassengerNumber": "001",
                    "PassengerName": "Mrs J Micallef",
                    "ClientId": "21628388",
                    "PassengerDocuments": [{
                        "DocumentType": "TourItinerary",
                        "DocumentName": "001_Mrs_J_Micallef_1_Itinerary_DEUSM11.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_1_Itinerary_DEUSM11.pdf"
                    }, {
                        "DocumentType": "HotelList",
                        "DocumentName": "001_Mrs_J_Micallef_2_HotelList.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_2_HotelList.pdf"
                    }, {
                        "DocumentType": "NoPrintVouchers",
                        "DocumentName": "001_Mrs_J_Micallef_3_VouchersINFOONLY.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_3_VouchersINFOONLY.pdf"
                    }, {
                        "DocumentType": "Vouchers",
                        "DocumentName": "001_Mrs_J_Micallef_4_VouchersPRINTME.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_4_VouchersPRINTME.pdf"
                    }, {
                        "DocumentType": "FlightItinerary",
                        "DocumentName": "001_Mrs_J_Micallef_5_FlightItinerary.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_5_FlightItinerary.pdf"
                    }]
                }, {
                    "PassengerNumber": "002",
                    "PassengerName": "Mrs C Gibki",
                    "ClientId": "21628389",
                    "PassengerDocuments": [{
                        "DocumentType": "TourItinerary",
                        "DocumentName": "002_Mrs_C_Gibki_Itinerary_DEUSM11.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_1_Itinerary_DEUSM11.pdf"
                    }, {
                        "DocumentType": "HotelList",
                        "DocumentName": "002_Mrs_C_Gibki_2_HotelList.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_2_HotelList.pdf"
                    }, {
                        "DocumentType": "NoPrintVouchers",
                        "DocumentName": "002_Mrs_C_Gibki_3_VouchersINFOONLY.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_3_VouchersINFOONLY.pdf"
                    }, {
                        "DocumentType": "Vouchers",
                        "DocumentName": "002_Mrs_C_Gibki_4_VouchersPRINTME.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_4_VouchersPRINTME.pdf"
                    }, {
                        "DocumentType": "FlightItinerary",
                        "DocumentName": "002_Mrs_C_Gibki_5_FlightItinerary.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_5_FlightItinerary.pdf"
                    }]
                }]
            }, {
                "TourCode": "DHSMM11",
                "TourName": "Hawaiian Explorer Moderate",
                "Passengers": [{
                    "PassengerNumber": "001",
                    "PassengerName": "Mrs J Micallef",
                    "ClientId": "21628388",
                    "PassengerDocuments": [{
                        "DocumentType": "TourItinerary",
                        "DocumentName": "001_Mrs_J_Micallef_1_Itinerary_DHSMM11.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_1_Itinerary_DHSMM11.pdf"
                    }, {
                        "DocumentType": "HotelList",
                        "DocumentName": "001_Mrs_J_Micallef_2_HotelList.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_2_HotelList.pdf"
                    }, {
                        "DocumentType": "NoPrintVouchers",
                        "DocumentName": "001_Mrs_J_Micallef_3_VouchersINFOONLY.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_3_VouchersINFOONLY.pdf"
                    }, {
                        "DocumentType": "Vouchers",
                        "DocumentName": "001_Mrs_J_Micallef_4_VouchersPRINTME.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_4_VouchersPRINTME.pdf"
                    }, {
                        "DocumentType": "FlightItinerary",
                        "DocumentName": "001_Mrs_J_Micallef_5_FlightItinerary.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/001_Mrs_J_Micallef_5_FlightItinerary.pdf"
                    }]
                }, {
                    "PassengerNumber": "002",
                    "PassengerName": "Mrs C Gibki",
                    "ClientId": "21628389",
                    "PassengerDocuments": [{
                        "DocumentType": "TourItinerary",
                        "DocumentName": "002_Mrs_C_Gibki_1_Itinerary_DHSMM11.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_1_Itinerary_DHSMM11.pdf"
                    }, {
                        "DocumentType": "HotelList",
                        "DocumentName": "002_Mrs_C_Gibki_2_HotelList.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_2_HotelList.pdf"
                    }, {
                        "DocumentType": "NoPrintVouchers",
                        "DocumentName": "002_Mrs_C_Gibki_3_VouchersINFOONLY.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_3_VouchersINFOONLY.pdf"
                    }, {
                        "DocumentType": "Vouchers",
                        "DocumentName": "002_Mrs_C_Gibki_4_VouchersPRINTME.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_4_VouchersPRINTME.pdf"
                    }, {
                        "DocumentType": "FlightItinerary",
                        "DocumentName": "002_Mrs_C_Gibki_5_FlightItinerary.pdf",
                        "DocumentUrl": "https://mmd.travcorpservices.com/documents/GeneratedDocuments/002_Mrs_C_Gibki_5_FlightItinerary.pdf"
                    }]
                }]
            }],
            "AdditionalDocuments": [{
                "DocumentName": "MarketingInfo.pdf",
                "DocumentUrl": "https://mmd.travcorpservices.com/documents/AdditionalDocuments/MarketingInfo.pdf"
            }, {
                "DocumentName": "CountryGuide.pdf",
                "DocumentUrl": "https://mmd.travcorpservices.com/documents/AdditionalDocuments/CountryGuide.pdf"
            }]
        }
    }
}

"SellingCompanyCode": "TTSYDS",
get first 2 chars

if UN or UU, UW
then follow the new approach
all other brands sollow the old approach
what mark built


*/



@RestResource(urlMapping='/v2/savePassengerDocsLongitude/*')
global with sharing class REST_savePassengerDocs_Longitude {
    
    @HttpPost
    global static postMMDJson doPOST(mmdJson json) {
    
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        postMMDJson response = new postMMDJson();
        response.eDocsJson = json.eDocsJson;
        String flatJson = System.JSON.serialize(json);

        //Create a new List of type Passenger_Document__c that will store all document records currently saved against the Passengers
        //If the new Documents get added correctly then the old documents will get deleted
        //If the Selling Company Code in the json is UNUSAS then look up the Booking Number and look where the selling company code starts with UN or UU
        response.Status = 'Success';
        response.Message = 'We received the Json';
        response.errorCode = '200';
        
        //call the addStandardDocuments method, this will go through the json sent to Salesforce and pick out the Document details to
        //be added to Salesforce and will put them into their own Passenger_Document__c records under the relevant Passenger
        addStandardDocuments(flatJson);
        
        //send back the results of the API
        return response;
    
    }
    //private static void addStandardDocuments(PostmmdJson response, List<Passenger_Document__c> dupDocs){

    @future (callout = true)
    private static void addStandardDocuments(String flatJson){

        //1. PostmmdJson response
        //2. List<Passenger_Document__c> dupDocs

        mmdJson json = (mmdJson)System.JSON.deserialize(flatJson, mmdJson.class);
        PostmmdJson response = new postMMDJson();
        response.eDocsJson = json.eDocsJson;
        
        //req.setBody('{"success": true,"fileName": "TT2BruceLarge-test.zip"}');
        


        List<Passenger_Document__c> dupDocs = new List<Passenger_Document__C>();

        if(response.eDocsJson.SellingCompanyCode == 'UNUSAS'){   
            dupDocs = [SELECT Id FROM Passenger_Document__c WHERE Booking_Number__c = :response.eDocsJson.BookingRef AND Passenger__r.Brand__c = 'Uniworld'];
        } else{
            dupDocs = [SELECT Id FROM Passenger_Document__c WHERE Booking_Number__c = :response.eDocsJson.BookingRef AND Selling_Company_Code_Text__c = :response.eDocsJson.SellingCompanyCode];  
        }
        
        if(response.eDocsJson.MTSMessaging == Null){  
            response.eDocsJson.MTSMessaging = 0; 
        }
        /********************************/
        //new change
        //instantiate two lists for passenger documents. One which will be added only to the Lead Passenger
        //The other to be added to the relevant Passenger
        List<Passenger_Document__c> masterPassDocs = new List<Passenger_Document__c>();
        List<Passenger_Document__c> passDocs = new List<Passenger_Document__c>();
        
        //instantiate two Passenger variables. One for the Lead Passenger and the other for
        //the current passenger
        Passenger__c masterPassenger = new Passenger__c();
        Passenger__c currentPassenger = new Passenger__c();
        List<Passenger__c> leadPassengers = new List<Passenger__c>();
        
        //Create two maps for the Booking Type and Document Type picklists on the Passenger Document object
        Map<String, String> BookingType = new Map<String, String>();
        Map<String, String> DocumentType = new Map<String, String>();
        
        //Populate both maps with the expected data vs the Salesforce equivalent
        populateMaps(BookingType, DocumentType);
        
        /*
        -Starting at the Tours level, start looping through the 3 levels of data that are in the json.
        The levels are: Tour, Passenger, Passenger Document
        -There can be multiple of each type so a big nest of for loops is required for getting to each
        level and for assigning the Documemnt to the correct Passenger and Tour
        */
        
        //to start, make sure there is at least 1 tour in the json
        if(response.eDocsJson.Tours.size() > 0){
        
            //then, starting with the first tour, start going through all of them
            for(integer i = 0; i < response.eDocsJson.Tours.size(); i++){
            
                //for each tour, make sure there is at least 1 Passenger
                if(response.eDocsJson.Tours[i].Passengers.size() > 0){
                
                    //If there is then create a list of Passengers called passengerList and populate it with all the data you want to
                    //add to the Passenger Document. This way there is only 1 SOQL query for each Tour. From here we can just iterate
                    //through the list of passengers
                    List<Passenger__c> passengerList = [SELECT Id, Name, Selling_Company_Short_Name__c, Account__c, 
                                        Booking_Passenger__r.Booking__c, Booking_Passenger__r.Client_ID__c, 
                                        Booking_Passenger__r.Pax_No__c, Booking_Passenger__r.Lead_Passenger__c, Tour_Instance__c
                                        FROM Passenger__c 
                                        WHERE Tour_Product__r.Name = :response.eDocsJson.Tours[i].TourCode 
                                        AND Booking_Number__c = :response.eDocsJson.BookingRef];
                    system.debug('Query Result: '+passengerList);
                    //Make sure that at least 1 passenger was found in Salesforce
                    if(passengerList.size() > 0){
                    
                        //Iterate through the newly created list of passengers
                        for(integer j = 0; j < passengerList.size(); j++){
                        
                            //At each Passenger, check if the related Booking Passenger is ticked as the Lead Passenger
                            if(passengerList[j].Booking_Passenger__r.Lead_Passenger__c == TRUE){
                            
                                //When you find the Lead Passenger, add that passenger to the masterPassenger variable
                                masterPassenger = passengerList[j];
                            
                            }
                        
                        }
                        
                        //Start iterating through the Passengers on the Tour
                        for(integer j = 0; j < response.eDocsJson.Tours[i].Passengers.size(); j++){
                        
                            //For each Passenger you go through, iterate through passengerList
                            for(integer k = 0; k < passengerList.size(); k++){
                        
                                //at each iteration check the current json passenger against the iterated passengerList passenger
                                //if Pax No. matches then add the current iteration of Passenger from passengerList to the currentPassenger variable
                                if(passengerList[k].Booking_Passenger__r.Pax_No__c == response.eDocsJson.Tours[i].Passengers[j].PassengerNumber){
                                
                                    currentPassenger = passengerList[k];
                                
                                }
                            
                            }
                            
                            //create a boolean variable called LeadPax and set it to False
                            boolean LeadPax = FALSE;
                            
                            //check the current json Passenger to see if they are the Lead Passenger
                            if(response.eDocsJson.Tours[i].Passengers[j].PassengerNumber == masterPassenger.Booking_Passenger__r.Pax_No__c && masterPassenger.Booking_Passenger__r.Lead_Passenger__c == TRUE){
                            
                                //If they are the Lead Passenger then set LeadPax to true
                                LeadPax = TRUE;
                            
                            }
                            
                            //for each passenger, make sure there is at least 1 document
                            if(response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments.size() > 0){
                        
                                //Iterate through the list of Documents
                                for(integer k = 0; k < response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments.size(); k++){
                                
                                    //Start populating a Passenger_Document__c variable with the details to be saved in Salesforce
                                    //for each Document record 
                                    Passenger_Document__c doc1 = new Passenger_Document__c(Passenger__c = currentPassenger.Id,
                                                                                            Booking_Type__c = BookingType.get(response.eDocsJson.BookingType),
                                                                                            Customer__c = currentPassenger.Account__c, 
                                                                                            Document_Name__c = response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments[k].DocumentName,
                                                                                            Document_Type__c = DocumentType.get(response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments[k].DocumentType),
                                                                                            Document_URL__c = response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments[k].DocumentURL,
                                                                                            Passenger_Name__c = response.eDocsJson.Tours[i].Passengers[j].PassengerName,
                                                                                            Passenger_Number__c = response.eDocsJson.Tours[i].Passengers[j].PassengerNumber,
                                                                                            Booking_Number__c = response.eDocsJson.BookingRef,
                                                                                            Selling_Company_Code_Text__c = currentPassenger.Selling_Company_Short_Name__c,
                                                                                            Tour_Instance__c = currentPassenger.Tour_Instance__c, /*Booking__c = currentPassenger.Booking_Passenger__r.Booking__c,*/
                                                                                            Lead_Passenger_Name__c = masterPassenger.Name, Travel_Agency__c = response.eDocsJson.TravelAgency,
                                                                                            MTS_Messaging__c = response.eDocsJson.MTSMessaging);
                                                                                            
                                    //Also start populating a second Passenger_Cocument__c variable with the same information
                                    //Except the owner should be the master 
                                    Passenger_Document__c doc2 = new Passenger_Document__c(Passenger__c = masterPassenger.Id,
                                                                                            Booking_Type__c = BookingType.get(response.eDocsJson.BookingType),
                                                                                            Customer__c = currentPassenger.Account__c, 
                                                                                            Document_Name__c = response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments[k].DocumentName,
                                                                                            Document_Type__c = DocumentType.get(response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments[k].DocumentType),
                                                                                            Document_URL__c = response.eDocsJson.Tours[i].Passengers[j].PassengerDocuments[k].DocumentURL,
                                                                                            Passenger_Name__c = response.eDocsJson.Tours[i].Passengers[j].PassengerName,
                                                                                            Passenger_Number__c = response.eDocsJson.Tours[i].Passengers[j].PassengerNumber,
                                                                                            Booking_Number__c = response.eDocsJson.BookingRef,
                                                                                            Selling_Company_Code_Text__c = currentPassenger.Selling_Company_Short_Name__c,
                                                                                            Tour_Instance__c = masterPassenger.Tour_Instance__c, /*Booking__c = masterPassenger.Booking_Passenger__r.Booking__c,*/
                                                                                            Lead_Passenger_Name__c = masterPassenger.Name, Travel_Agency__c = response.eDocsJson.TravelAgency,
                                                                                            MTS_Messaging__c = response.eDocsJson.MTSMessaging);
                                    
                                    //Add this Passenger_Document__c variable to the list of Passenger Documents
                                    passDocs.add(doc1);
                                    
                                    //If the current Passenger is not Lead Passenger then add this Document to the list of Master Passenger Documents as well
                                    if(LeadPax == FALSE){
                                    
                                        masterPassDocs.add(doc2);
                                    
                                    }
                                
                                }
                                
                            }
                            
                            //If no Documents were found for a Passenger then add Failure as the Status
                            //And state Which Passenger on which Tour has no Documents
                            Else {
                            
                                if(response.Message == Null){
                        
                                    response.Status = 'Failure';
                                    response.Message = 'There are no Documents associated with the Passenger ' + response.eDocsJson.Tours[i].Passengers[j].PassengerNumber + ' on the Tour ' + response.eDocsJson.Tours[i].TourName;
                                    response.errorCode = '401';
                                
                                }
                                Else {
                                
                                    response.Status = 'Failure';
                                    response.Message += ' and there are no Documents associated with the Passenger ' + response.eDocsJson.Tours[i].Passengers[j].PassengerNumber + ' on the Tour ' + response.eDocsJson.Tours[i].TourName;
                                    response.errorCode += ' + 401';
                                
                                }
                            
                            }
                        
                        }
                    
                    }
                    
                    else{
                    
                        If(response.Message == Null){
                        
                            response.Status = 'Failure';
                            response.Message = 'There are no Passengers in Salesforce for tour ' + response.eDocsJson.Tours[i].TourName;
                            response.errorCode = '351';
                        
                        }
                        else{
                        
                            response.Status = 'Failure';
                            response.Message += ' and there are no Passengers in Salesforce for tour ' + response.eDocsJson.Tours[i].TourName;
                            response.errorCode += ' + 351';
                        
                        }
                        
                    }
                    
                }
                
                //If there are no Passengers on a Tour then add Failure as the Status
                //And state which Tour there are on Passengers
                Else {
                
                    if(response.Message == Null){
                    
                        response.Status = 'Failure';
                        response.Message = 'There are no Passengers in Tour ' + response.eDocsJson.Tours[i].TourName;
                        response.errorCode = '301';
                        
                    }
                    else {
                    
                        response.Status = 'Failure';
                        response.Message += ' and There are no Passengers in Tour ' + response.eDocsJson.Tours[i].TourName;
                        response.errorCode += ' + 301';
                    
                    }
                
                }
            
            }
            
            //Once all of the Tours have been processed, next look at the Additional Documents
            //Start by checking if there is at least 1 Additional Document
            if(response.eDocsJson.AdditionalDocuments.size() > 0){
            
                //If there is, then again grab a list of Passengers, this time from the wntire booking and put them into a list
                //called passengerList
                List<Passenger__c> passengerList = new List<Passenger__c>();
                
                if(response.eDocsJson.SellingCompanyCode == 'UNUSAS'){
                
                    passengerList = [SELECT Id, Name, Selling_Company_Short_Name__c, Account__c, 
                                            Booking_Passenger__r.Booking__c, Booking_Passenger__r.Client_ID__c, 
                                            Booking_Passenger__r.Pax_No__c, Booking_Passenger__r.Lead_Passenger__c,
                                            Brand__c, Tour_Instance__c
                                            FROM Passenger__c 
                                            WHERE Brand__c = 'Uniworld' 
                                            AND Booking_Passenger__r.Booking__r.Name = :response.eDocsJson.BookingRef];
                                            
                } else{
                
                    passengerList = [SELECT Id, Name, Selling_Company_Short_Name__c, Account__c, 
                                            Booking_Passenger__r.Booking__c, Booking_Passenger__r.Client_ID__c, 
                                            Booking_Passenger__r.Pax_No__c, Booking_Passenger__r.Lead_Passenger__c,
                                            Tour_Instance__c
                                            FROM Passenger__c 
                                            WHERE Booking_Passenger__r.Booking__r.Selling_Company__r.Selling_Company_Short_Name__c = :response.eDocsJson.SellingCompanyCode 
                                            AND Booking_Passenger__r.Booking__r.Name = :response.eDocsJson.BookingRef];
                
                }
                
                //Make sure at least 1 Passenger record was found in Salesforce
                if(passengerList.size() > 0){
                
                    //For each Passenger in that list, iterate through them looking for ones marked as Lead Passenger
                    for(integer i = 0; i < passengerList.size(); i++){
                    
                        //When you find one, add that passenger to a list of Passengers called leadPassenger
                        if(passengerList[i].Booking_Passenger__r.Lead_Passenger__c == TRUE){
                        
                            leadPassengers.add(passengerList[i]);
                        
                        }
                    
                    }
                    
                    //Next, start going through the list of Additional Documents on the json
                    for(integer i = 0; i < response.eDocsJson.AdditionalDocuments.size(); i++){
                    
                        //Each time, go through the list of leadPassengers
                        for(integer j = 0; j < leadPassengers.size(); j++){
                        
                            //For each Lead Passenger, create a new variable called doc1. Set the Passenger
                            //to the current leadPassenger
                            Passenger_Document__c doc1 = new Passenger_Document__c(Passenger__c = leadPassengers[j].Id,
                                                                                Booking_Type__c = BookingType.get(response.eDocsJson.BookingType),
                                                                                Customer__c = leadPassengers[j].Account__c, 
                                                                                Document_Name__c = response.eDocsJson.AdditionalDocuments[i].DocumentName,
                                                                                Document_Type__c = 'Other',
                                                                                Document_URL__c = response.eDocsJson.AdditionalDocuments[i].DocumentURL,
                                                                                Passenger_Name__c = leadPassengers[j].Name,
                                                                                Passenger_Number__c = leadPassengers[j].Booking_Passenger__r.Pax_No__c,
                                                                                Tour_Instance__c = leadPassengers[j].Tour_Instance__c,
                                                                                Booking_Number__c = response.eDocsJson.BookingRef,
                                                                                Selling_Company_Code_Text__c = leadPassengers[j].Selling_Company_Short_Name__c,
                                                                                //Booking__c = leadPassengers[j].Booking_Passenger__r.Booking__c,
                                                                                Lead_Passenger_Name__c = leadPassengers[j].Name,
                                                                                Travel_Agency__c = response.eDocsJson.TravelAgency,
                                                                                MTS_Messaging__c = response.eDocsJson.MTSMessaging);
                                                                                
                            //Add that doc1 Passenger Document to a list of Passenger Documents called masterPassDocs
                            masterPassDocs.add(doc1);
                        }
                    
                    }
                
                }
                
            }
        
        }
        
        //If there are no Tours in the json then add Failure as the Status
        //And state that there are no Tours in the json
        else {
        
            response.Status = 'Failure';
            response.Message = 'There are no tours in this json';
            response.errorCode = '201';
        
        }
        
        //Finally, if there is at least 1 document in passDocs then start a try catch
        if(passDocs.size() > 0 && response.Status != 'Failure'){
        
            //In this Try section you will attempt to insert the lists of Passenger Documents
            //At the end of the Try section you will delete the previously queried list of
            //old document links
            try{
                
                insert passDocs;
                
                if(masterPassDocs.size() > 0){ 
                
                    insert masterPassDocs;
                
                }
                
                if(dupDocs.size() > 0){
                
                    delete dupDocs;
                
                }
                
                //If you have done all that successfully then set the Status to Success and set the message to say
                //How many Passenger Documents were uploaded to Salesforce
                response.status = 'Success';
                response.message = passDocs.size() + masterPassDocs.size() + ' Documents have been added to Salesforce';
                response.errorCode = '200';
                
            }
            //If at any point in the Try section there was an error, the Try section will cut out and this catch section will
            //kick in. The catch section will set the Status to Error and it will read back which error it encountered
            catch(Exception exc){
                response.status = 'Error';
                response.message = 'Your request failed with the following error: ' + exc.getMessage();
                response.errorCode = '101';
                
            }
        
        }
        system.debug('This is the response '+response);
        System.enqueueJob(new ProcessEdocsResponse(System.JSON.serialize(response)));
    }
    
    //Populate both Maps with the data in the json vs. the data to be stored in Salesforce
    private static void populateMaps(map<string, string> BookingType, map<string, string> DocumentType){
    
        BookingType.put('CD', 'Client Direct');
        BookingType.put('CT', 'Travel Agent');
        BookingType.put('GA', 'Groups');
        BookingType.put('SG', 'Special Groups');
        
        DocumentType.put('TourItinerary', 'Tour Itinerary');
        DocumentType.put('FlightItinerary', 'Flight Itinerary');
        DocumentType.put('HotelList', 'Hotel List');
        DocumentType.put('Vouchers', 'Vouchers For Printing');
        DocumentType.put('NoPrintVouchers', 'Vouchers For Information');
        DocumentType.put('CruiseTicket', 'Cruise Ticket');
        DocumentType.put('CruiseCompanion', 'Cruise Companion');
        DocumentType.put('CustomPlanningVoucher', 'Custom Planning Voucher');
        DocumentType.put('TravelProtectionPlan', 'Travel Protection Plan');
        DocumentType.put('DockingChangeNotification', 'Docking Change Notification');
        DocumentType.put('ImportantTransferNotice', 'Important Transfer Notice');
        DocumentType.put('CologneTrainTransfer', 'Cologne Train Transfer');
        DocumentType.put('VenicePortMap', 'Venice Port Map');
        DocumentType.put('ScheduleAtAGlance', 'Schedule At A Glance');
        DocumentType.put('AdditionalDocument', 'Other');
    
    }
    
    global class postMMDJson{
    
        public eDocsJson eDocsJson;
        public String status;
        public String message;
        public String errorCode;
    
    }
    
    global class mmdJson{
    
        public eDocsJson eDocsJson = new eDocsJson();
        public List<Tours> Tours = new List<Tours>();
        public List<Passengers> Passengers = new List<Passengers>();
        public List<PassengerDocuments> PassengerDocuments = new List<PassengerDocuments>();
        public List<AdditionalDocuments> AdditionalDocuments = new List<AdditionalDocuments>();
    
    }
    
    global class eDocsJson{
        
        public string Brand;
        public string LeadPassengerEmail;
        public string TravelAgentEmail;
        public string BookingRef;
        public string SellingCompanyCode;
        public string BookingType;
        public datetime DepartureDate;
        public string TravelAgency;
        public string LeadPassengerName;
        public integer MTSMessaging;
        public List<Tours> Tours;
        public List<AdditionalDocuments> AdditionalDocuments;
    
    }
    
    global class Tours{
    
        public string TourCode{get;set;}
        public string TourName{get;set;}
        public List<Passengers> Passengers{get;set;}
    
    }
    
    global class Passengers{
    
        public string PassengerNumber{get;set;}
        public string PassengerName{get;set;}
        public string ClientId{get;set;}
        public List<PassengerDocuments> PassengerDocuments{get;set;}
    
    }
    
    global class PassengerDocuments{
    
        public string DocumentType{get;set;}
        public string DocumentName{get;set;}
        public string DocumentUrl{get;set;}
    
    }
    
    global class AdditionalDocuments{
    
        public string DocumentName{get;set;}
        public string DocumentUrl{get;set;}
    
    }

}